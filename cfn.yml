Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: greengrass

  EC2KeyPairName:
    Description: The name of the key pair to use for provisioning EC2 instances 
    Type: String
    Default: your-keypair-name

  SecurityAccessCIDR:
    Description: CIDR block to limit inbound access for SSH and RDP
    Type: String
    Default: '0.0.0.0/0'

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.11.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.11.10.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.11.20.0/24

Mappings: 
  RegionMap: 
    us-east-1:
      Greengrass: ami-0947d2ba12ee1ff75
      WindowsIoT: ami-0eb7fbcc77e5e6ec6

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !GetAtt InstanceAZ.AvailabilityZone
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  GreengrassInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow mqtt ssh and rdp
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8883
          ToPort: 8883
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SecurityAccessCIDR
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref SecurityAccessCIDR

  GreengrassInstanceSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref GreengrassInstanceSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt GreengrassInstanceSecurityGroup.GroupId
  
  GreengrassInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: "greengrass-instance-role"
        AssumeRolePolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "sts:AssumeRole"
                Principal: 
                    Service: 
                      - "ec2.amazonaws.com"

  GreengrassInstancePolicy:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "greengrass-instance-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
                - "iot:*"
            Resource: "*"
      Roles: 
        - 
          Ref: "GreengrassInstanceRole"

  GreengrassInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "GreengrassInstanceRole"
  
  GreengrassInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet1
      InstanceType: "t3.small"
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Greengrass]
      IamInstanceProfile:
        Ref: GreengrassInstanceProfile
      KeyName: 
        Ref: EC2KeyPairName
      SecurityGroupIds:
        - !Ref GreengrassInstanceSecurityGroup
      Tags: 
        - Key: Name
          Value: Greengrass

  WindowsIoTInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet1
      InstanceType: "t3.small"
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", WindowsIoT]
      KeyName: 
        Ref: EC2KeyPairName
      SecurityGroupIds:
        - !Ref GreengrassInstanceSecurityGroup
      Tags: 
        - Key: Name
          Value: WindowsIoT

Outputs:
  GreengrassPublicIP:
    Description: The Public IP address of the Greengrass EC2 instance 
    Value: !GetAtt GreengrassInstance.PublicIp

  GreengrassPrivateIP:
    Description: The Public IP address of the Greengrass EC2 instance 
    Value: !GetAtt GreengrassInstance.PrivateIp
  
  WindowsIoTPublicIp:
    Description: The Public IP address of the WindowsIoTInstance EC2 instance 
    Value: !GetAtt WindowsIoTInstance.PublicIp